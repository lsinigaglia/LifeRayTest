/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package servicebuilder.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import servicebuilder.model.Documenti;
import servicebuilder.model.DocumentiModel;

/**
 * The base model implementation for the Documenti service. Represents a row in the &quot;AQ_Documenti&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DocumentiModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DocumentiImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DocumentiImpl
 * @generated
 */
public class DocumentiModelImpl
	extends BaseModelImpl<Documenti> implements DocumentiModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a documenti model instance should use the <code>Documenti</code> interface instead.
	 */
	public static final String TABLE_NAME = "AQ_Documenti";

	public static final Object[][] TABLE_COLUMNS = {
		{"Id_CodiceDocumenti", Types.BIGINT},
		{"CodiceDocumento", Types.VARCHAR}, {"NomeFile", Types.VARCHAR},
		{"ContenutoFile", Types.VARCHAR}, {"Versione", Types.VARCHAR},
		{"DataVersione", Types.TIMESTAMP}, {"DataCaricamento", Types.TIMESTAMP},
		{"userIns", Types.VARCHAR}, {"userAgg", Types.VARCHAR},
		{"dataIns", Types.TIMESTAMP}, {"dataAgg", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("Id_CodiceDocumenti", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CodiceDocumento", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NomeFile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ContenutoFile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Versione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DataVersione", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("DataCaricamento", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userIns", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userAgg", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataIns", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dataAgg", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AQ_Documenti (Id_CodiceDocumenti LONG,CodiceDocumento VARCHAR(75) not null primary key,NomeFile VARCHAR(75) null,ContenutoFile VARCHAR(75) null,Versione VARCHAR(75) null,DataVersione DATE null,DataCaricamento DATE null,userIns VARCHAR(75) null,userAgg VARCHAR(75) null,dataIns DATE null,dataAgg DATE null)";

	public static final String TABLE_SQL_DROP = "drop table AQ_Documenti";

	public static final String ORDER_BY_JPQL =
		" ORDER BY documenti.CodiceDocumento ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AQ_Documenti.CodiceDocumento ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CODICEDOCUMENTO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DocumentiModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _CodiceDocumento;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setCodiceDocumento(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _CodiceDocumento;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Documenti.class;
	}

	@Override
	public String getModelClassName() {
		return Documenti.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Documenti, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Documenti, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Documenti, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Documenti)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Documenti, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Documenti, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Documenti)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Documenti, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Documenti, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Documenti, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Documenti, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Documenti, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Documenti, Object>>();
		Map<String, BiConsumer<Documenti, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Documenti, ?>>();

		attributeGetterFunctions.put(
			"Id_CodiceDocumenti", Documenti::getId_CodiceDocumenti);
		attributeSetterBiConsumers.put(
			"Id_CodiceDocumenti",
			(BiConsumer<Documenti, Long>)Documenti::setId_CodiceDocumenti);
		attributeGetterFunctions.put(
			"CodiceDocumento", Documenti::getCodiceDocumento);
		attributeSetterBiConsumers.put(
			"CodiceDocumento",
			(BiConsumer<Documenti, String>)Documenti::setCodiceDocumento);
		attributeGetterFunctions.put("NomeFile", Documenti::getNomeFile);
		attributeSetterBiConsumers.put(
			"NomeFile", (BiConsumer<Documenti, String>)Documenti::setNomeFile);
		attributeGetterFunctions.put(
			"ContenutoFile", Documenti::getContenutoFile);
		attributeSetterBiConsumers.put(
			"ContenutoFile",
			(BiConsumer<Documenti, String>)Documenti::setContenutoFile);
		attributeGetterFunctions.put("Versione", Documenti::getVersione);
		attributeSetterBiConsumers.put(
			"Versione", (BiConsumer<Documenti, String>)Documenti::setVersione);
		attributeGetterFunctions.put(
			"DataVersione", Documenti::getDataVersione);
		attributeSetterBiConsumers.put(
			"DataVersione",
			(BiConsumer<Documenti, Date>)Documenti::setDataVersione);
		attributeGetterFunctions.put(
			"DataCaricamento", Documenti::getDataCaricamento);
		attributeSetterBiConsumers.put(
			"DataCaricamento",
			(BiConsumer<Documenti, Date>)Documenti::setDataCaricamento);
		attributeGetterFunctions.put("userIns", Documenti::getUserIns);
		attributeSetterBiConsumers.put(
			"userIns", (BiConsumer<Documenti, String>)Documenti::setUserIns);
		attributeGetterFunctions.put("userAgg", Documenti::getUserAgg);
		attributeSetterBiConsumers.put(
			"userAgg", (BiConsumer<Documenti, String>)Documenti::setUserAgg);
		attributeGetterFunctions.put("dataIns", Documenti::getDataIns);
		attributeSetterBiConsumers.put(
			"dataIns", (BiConsumer<Documenti, Date>)Documenti::setDataIns);
		attributeGetterFunctions.put("dataAgg", Documenti::getDataAgg);
		attributeSetterBiConsumers.put(
			"dataAgg", (BiConsumer<Documenti, Date>)Documenti::setDataAgg);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId_CodiceDocumenti() {
		return _Id_CodiceDocumenti;
	}

	@Override
	public void setId_CodiceDocumenti(long Id_CodiceDocumenti) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Id_CodiceDocumenti = Id_CodiceDocumenti;
	}

	@Override
	public String getCodiceDocumento() {
		if (_CodiceDocumento == null) {
			return "";
		}
		else {
			return _CodiceDocumento;
		}
	}

	@Override
	public void setCodiceDocumento(String CodiceDocumento) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CodiceDocumento = CodiceDocumento;
	}

	@Override
	public String getNomeFile() {
		if (_NomeFile == null) {
			return "";
		}
		else {
			return _NomeFile;
		}
	}

	@Override
	public void setNomeFile(String NomeFile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_NomeFile = NomeFile;
	}

	@Override
	public String getContenutoFile() {
		if (_ContenutoFile == null) {
			return "";
		}
		else {
			return _ContenutoFile;
		}
	}

	@Override
	public void setContenutoFile(String ContenutoFile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ContenutoFile = ContenutoFile;
	}

	@Override
	public String getVersione() {
		if (_Versione == null) {
			return "";
		}
		else {
			return _Versione;
		}
	}

	@Override
	public void setVersione(String Versione) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Versione = Versione;
	}

	@Override
	public Date getDataVersione() {
		return _DataVersione;
	}

	@Override
	public void setDataVersione(Date DataVersione) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_DataVersione = DataVersione;
	}

	@Override
	public Date getDataCaricamento() {
		return _DataCaricamento;
	}

	@Override
	public void setDataCaricamento(Date DataCaricamento) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_DataCaricamento = DataCaricamento;
	}

	@Override
	public String getUserIns() {
		if (_userIns == null) {
			return "";
		}
		else {
			return _userIns;
		}
	}

	@Override
	public void setUserIns(String userIns) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userIns = userIns;
	}

	@Override
	public String getUserAgg() {
		if (_userAgg == null) {
			return "";
		}
		else {
			return _userAgg;
		}
	}

	@Override
	public void setUserAgg(String userAgg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userAgg = userAgg;
	}

	@Override
	public Date getDataIns() {
		return _dataIns;
	}

	@Override
	public void setDataIns(Date dataIns) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dataIns = dataIns;
	}

	@Override
	public Date getDataAgg() {
		return _dataAgg;
	}

	@Override
	public void setDataAgg(Date dataAgg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dataAgg = dataAgg;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public Documenti toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Documenti>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DocumentiImpl documentiImpl = new DocumentiImpl();

		documentiImpl.setId_CodiceDocumenti(getId_CodiceDocumenti());
		documentiImpl.setCodiceDocumento(getCodiceDocumento());
		documentiImpl.setNomeFile(getNomeFile());
		documentiImpl.setContenutoFile(getContenutoFile());
		documentiImpl.setVersione(getVersione());
		documentiImpl.setDataVersione(getDataVersione());
		documentiImpl.setDataCaricamento(getDataCaricamento());
		documentiImpl.setUserIns(getUserIns());
		documentiImpl.setUserAgg(getUserAgg());
		documentiImpl.setDataIns(getDataIns());
		documentiImpl.setDataAgg(getDataAgg());

		documentiImpl.resetOriginalValues();

		return documentiImpl;
	}

	@Override
	public Documenti cloneWithOriginalValues() {
		DocumentiImpl documentiImpl = new DocumentiImpl();

		documentiImpl.setId_CodiceDocumenti(
			this.<Long>getColumnOriginalValue("Id_CodiceDocumenti"));
		documentiImpl.setCodiceDocumento(
			this.<String>getColumnOriginalValue("CodiceDocumento"));
		documentiImpl.setNomeFile(
			this.<String>getColumnOriginalValue("NomeFile"));
		documentiImpl.setContenutoFile(
			this.<String>getColumnOriginalValue("ContenutoFile"));
		documentiImpl.setVersione(
			this.<String>getColumnOriginalValue("Versione"));
		documentiImpl.setDataVersione(
			this.<Date>getColumnOriginalValue("DataVersione"));
		documentiImpl.setDataCaricamento(
			this.<Date>getColumnOriginalValue("DataCaricamento"));
		documentiImpl.setUserIns(
			this.<String>getColumnOriginalValue("userIns"));
		documentiImpl.setUserAgg(
			this.<String>getColumnOriginalValue("userAgg"));
		documentiImpl.setDataIns(this.<Date>getColumnOriginalValue("dataIns"));
		documentiImpl.setDataAgg(this.<Date>getColumnOriginalValue("dataAgg"));

		return documentiImpl;
	}

	@Override
	public int compareTo(Documenti documenti) {
		String primaryKey = documenti.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Documenti)) {
			return false;
		}

		Documenti documenti = (Documenti)object;

		String primaryKey = documenti.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Documenti> toCacheModel() {
		DocumentiCacheModel documentiCacheModel = new DocumentiCacheModel();

		documentiCacheModel.Id_CodiceDocumenti = getId_CodiceDocumenti();

		documentiCacheModel.CodiceDocumento = getCodiceDocumento();

		String CodiceDocumento = documentiCacheModel.CodiceDocumento;

		if ((CodiceDocumento != null) && (CodiceDocumento.length() == 0)) {
			documentiCacheModel.CodiceDocumento = null;
		}

		documentiCacheModel.NomeFile = getNomeFile();

		String NomeFile = documentiCacheModel.NomeFile;

		if ((NomeFile != null) && (NomeFile.length() == 0)) {
			documentiCacheModel.NomeFile = null;
		}

		documentiCacheModel.ContenutoFile = getContenutoFile();

		String ContenutoFile = documentiCacheModel.ContenutoFile;

		if ((ContenutoFile != null) && (ContenutoFile.length() == 0)) {
			documentiCacheModel.ContenutoFile = null;
		}

		documentiCacheModel.Versione = getVersione();

		String Versione = documentiCacheModel.Versione;

		if ((Versione != null) && (Versione.length() == 0)) {
			documentiCacheModel.Versione = null;
		}

		Date DataVersione = getDataVersione();

		if (DataVersione != null) {
			documentiCacheModel.DataVersione = DataVersione.getTime();
		}
		else {
			documentiCacheModel.DataVersione = Long.MIN_VALUE;
		}

		Date DataCaricamento = getDataCaricamento();

		if (DataCaricamento != null) {
			documentiCacheModel.DataCaricamento = DataCaricamento.getTime();
		}
		else {
			documentiCacheModel.DataCaricamento = Long.MIN_VALUE;
		}

		documentiCacheModel.userIns = getUserIns();

		String userIns = documentiCacheModel.userIns;

		if ((userIns != null) && (userIns.length() == 0)) {
			documentiCacheModel.userIns = null;
		}

		documentiCacheModel.userAgg = getUserAgg();

		String userAgg = documentiCacheModel.userAgg;

		if ((userAgg != null) && (userAgg.length() == 0)) {
			documentiCacheModel.userAgg = null;
		}

		Date dataIns = getDataIns();

		if (dataIns != null) {
			documentiCacheModel.dataIns = dataIns.getTime();
		}
		else {
			documentiCacheModel.dataIns = Long.MIN_VALUE;
		}

		Date dataAgg = getDataAgg();

		if (dataAgg != null) {
			documentiCacheModel.dataAgg = dataAgg.getTime();
		}
		else {
			documentiCacheModel.dataAgg = Long.MIN_VALUE;
		}

		return documentiCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Documenti, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Documenti, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Documenti, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Documenti)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Documenti, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Documenti, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Documenti, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Documenti)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Documenti>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Documenti.class, ModelWrapper.class);

	}

	private long _Id_CodiceDocumenti;
	private String _CodiceDocumento;
	private String _NomeFile;
	private String _ContenutoFile;
	private String _Versione;
	private Date _DataVersione;
	private Date _DataCaricamento;
	private String _userIns;
	private String _userAgg;
	private Date _dataIns;
	private Date _dataAgg;

	public <T> T getColumnValue(String columnName) {
		Function<Documenti, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Documenti)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("Id_CodiceDocumenti", _Id_CodiceDocumenti);
		_columnOriginalValues.put("CodiceDocumento", _CodiceDocumento);
		_columnOriginalValues.put("NomeFile", _NomeFile);
		_columnOriginalValues.put("ContenutoFile", _ContenutoFile);
		_columnOriginalValues.put("Versione", _Versione);
		_columnOriginalValues.put("DataVersione", _DataVersione);
		_columnOriginalValues.put("DataCaricamento", _DataCaricamento);
		_columnOriginalValues.put("userIns", _userIns);
		_columnOriginalValues.put("userAgg", _userAgg);
		_columnOriginalValues.put("dataIns", _dataIns);
		_columnOriginalValues.put("dataAgg", _dataAgg);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("Id_CodiceDocumenti", 1L);

		columnBitmasks.put("CodiceDocumento", 2L);

		columnBitmasks.put("NomeFile", 4L);

		columnBitmasks.put("ContenutoFile", 8L);

		columnBitmasks.put("Versione", 16L);

		columnBitmasks.put("DataVersione", 32L);

		columnBitmasks.put("DataCaricamento", 64L);

		columnBitmasks.put("userIns", 128L);

		columnBitmasks.put("userAgg", 256L);

		columnBitmasks.put("dataIns", 512L);

		columnBitmasks.put("dataAgg", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Documenti _escapedModel;

}